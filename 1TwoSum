Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution.

Example:
```java
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
```
给定一个int数组和一个目标值，求数组当中的两个数相加等于目标值的下标。

```java
public class Sulution{
	public int[] twosum(int[] nums,int target){
		int[] res=new int[2];
		for(int i=0;i<nums.length;i++){
			for(int j=i+1;j<nums.length;j++){
				if(nums[i]+nums[j]==target){
					res[0]=i;
					res[1]=j;
					return res;
				}
			}
		}
		return res;
	}
	
}
```

自己考虑太少，两个for循环时间复杂度为O(n^2)。
```java
public class Sulution{
	public int[] twosum(int[] nums,int target){
		int[] res=new int[2];
		Map<Integer,Integer> map=new Hashmap<>();
		for(int i=0;i<nums.length;i++){
			int comple=target-nums[i];
			if(map.containsKey(comple)){
				res[0]=map.get(comple);
				res[1]=i;
				return res;
			}
			map.put(nums[i],i)
		}
		throw new IllegalArgumentException("No two sum solution");
	}

}
```

这个是参考答案，时间复杂度为O(n),空间复杂度为O(n)。